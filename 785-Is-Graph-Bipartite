class Solution {
public:
    bool isBipartite(vector<vector<int>>& graph) {
        vector<int> color_arr(graph.size(),-1);
        vector<int> visited(graph.size(),-1);
        for(int i=0;i<graph.size();i++){
            if(visited[i]==-1){
                if(bfs(i,visited,graph,color_arr)){
                    return false;
                }
            }
        }
        return true;
    }
    bool bfs(int node,vector<int> &visited,vector<vector<int>> &graph,vector<int> &color_arr){
        queue<pair<int,int>> q;
        q.push({node,1});
        while(!q.empty()){
            int val=q.front().first;
            int color=q.front().second;
            color_arr[val]=color;
            visited[val]=1;
            int og=color;
            if(color==1){
                color=0;
            }
            else{
                color=1;
            }

            q.pop();
            for(int i=0;i<graph[val].size();i++){
                if(visited[graph[val][i]]==-1){
                    q.push({graph[val][i],color});
                    color_arr[graph[val][i]]=color;
                    visited[graph[val][i]]=1;
                }
                else if(color_arr[graph[val][i]]==og){
                    return true;
                }
            }
        }
        return false;
    }
};