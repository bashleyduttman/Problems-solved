class Solution:
    def isBipartite(self, graph: List[List[int]]) -> bool:
        dic={i:[] for i in range(len(graph))}
        for i in range(len(graph)):
            for j in range(len(graph[i])):
                dic[i].append(graph[i][j])
        mark=[-1 for i in range(len(graph))]
        queue=deque([(0,-1,3)])
        visited=set()
        def bfs(n):
            queue=deque([(n,-1,3)])
            while queue:
                node,parent,c=queue.popleft()
                visited.add(node)
                if mark[node]==-1:
                    mark[node]=c
                for value in dic[node]:
                    print(parent,value)
                    if value not in visited:
                        if c==3:
                            queue.append((value,node,4))
                            visited.add(value)
                            
                            
                        else:
                            queue.append((value,node,3))
                            visited.add(value)
                        
                    elif parent!=value and mark[value]==mark[node]:
                    
                        return False
        
            return True
        for i in range(len(graph)):
            if bfs(i)==False:
                return False
        return True

        